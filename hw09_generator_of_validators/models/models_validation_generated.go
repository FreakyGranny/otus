// Code generated by go-validate tool. DO NOT EDIT.

package models

import (
	"errors"
	"fmt"
	"regexp"
	"strconv"
	"strings"
)

//ValidationError ...
type ValidationError struct {
	Field string
	Err   error
}

func newValidationError(fieldName string, err string) ValidationError {
	return ValidationError{
		Field: fieldName,
		Err:   errors.New(fmt.Sprintf("Field [%s] is invalid: %s", fieldName, err)),
	}
}

func checkIntLower(v int, e int) bool {
	return v < e
}

func checkIntGreater(v int, e int) bool {
	return v > e
}

func checkIntIn(v int, s string) bool {
	for _, i := range strings.Split(s, ",") {
		val, err := strconv.Atoi(i)
		if err != nil {
			return false
		}
		if v == val {
			return true
		}
	}

	return false
}

func checkStringLen(v string, l int) bool {
	return len(v) == l
}

func checkStringIn(v string, s string) bool {
	for _, i := range strings.Split(s, ",") {
		if v == i {
			return true
		}
	}

	return false
}

func checkStringRegexp(v string, s string) bool {
	r, err := regexp.Compile(s)
	if err != nil {
		return false
	}
	if r.MatchString(v) {
		return true
	}

	return false
}

//Validate checks values of struct fields for constraints
func (m App) Validate() ([]ValidationError, error) {
	errs := make([]ValidationError, 0)
	if !checkStringLen(m.Version, 5) {
		errs = append(errs, newValidationError("Version", "value length not equals 5"))
	}
	return errs, nil
}

//Validate checks values of struct fields for constraints
func (m Response) Validate() ([]ValidationError, error) {
	errs := make([]ValidationError, 0)
	if !checkIntIn(m.Code, "200,404,500") {
		errs = append(errs, newValidationError("Code", "value not at list of allowed values [200,404,500]"))
	}
	return errs, nil
}

//Validate checks values of struct fields for constraints
func (m User) Validate() ([]ValidationError, error) {
	errs := make([]ValidationError, 0)
	if !checkStringLen(m.ID, 36) {
		errs = append(errs, newValidationError("ID", "value length not equals 36"))
	}
	if checkIntGreater(m.Age, 50) {
		errs = append(errs, newValidationError("Age", "value is greater then 50"))
	}
	if checkIntLower(m.Age, 18) {
		errs = append(errs, newValidationError("Age", "value is lower then 18"))
	}
	if !checkStringRegexp(m.Email, "^\\w+@\\w+\\.\\w+$") {
		errs = append(errs, newValidationError("Email", "value does not match regexp"))
	}
	if !checkStringIn(string(m.Role), "admin,stuff") {
		errs = append(errs, newValidationError("Role", "value not at list of allowed values [admin,stuff]"))
	}
	for _, x := range m.Phones {
		if checkStringLen(x, 11) {
			errs = append(errs, newValidationError("Phones", "at least one value length not equals 11"))
			break
		}
	}
	return errs, nil
}
