package main

const validationTemplate = `
// Code generated by go-validate tool. DO NOT EDIT.

package {{.Package}}

import (
	"errors"
	"fmt"
	"regexp"
	"strconv"
	"strings"
)

//ValidationError ...
type ValidationError struct {
	Field string
	Err       error
}

func newValidationError(fieldName string, err string) ValidationError {
	return ValidationError{
		Field: fieldName,
		Err:   errors.New(fmt.Sprintf("Field [%s] is invalid: %s", fieldName, err)),
	}
}

func checkIntLower(v int, e int) bool {
	return v < e
}

func checkIntGreater(v int, e int) bool {
	return v > e
}

func checkIntIn(v int, s string) bool {
	for _, i := range strings.Split(s, ",") {
		val, err := strconv.Atoi(i)
		if err != nil {
			return false
		}
		if v == val  {
			return true
		}
	}

	return false
}

func checkStringLen(v string, l int) bool {
	return len(v) == l
}

func checkStringIn(v string, s string) bool {
	for _, i := range strings.Split(s, ",") {
		if v == i {
			return true
		}
	}

	return false
}

func checkStringRegexp(v string, s string) bool {
	r, err := regexp.Compile(s)
	if err != nil {
		return false
	}
	if r.MatchString(v) {
		return true
	}

	return false
}
{{range $strKey, $strVal := .Structs}}
//Validate checks values of struct fields for constraints
func (m {{$strKey}}) Validate() ([]ValidationError, error) {
	errs := make([]ValidationError, 0)
	{{range $field := $strVal -}}
	{{range $exprKey, $exprVal := $field.Expr -}}
	{{if eq $field.Type "int" -}}
	{{if $field.IsArray -}}
	{{if eq $exprKey "min" -}}
	for _, x := range m.{{$field.Name}} {
		if checkIntLower({{if $field.NeedCast -}}{{$field.Type}}({{end -}}x{{if $field.NeedCast -}}){{end -}}, {{$exprVal}}) {
			errs = append(errs, newValidationError("{{$field.Name}}", "at least one value lower then {{$exprVal}}"))
			break
		}	
	}
	{{end -}}
	{{if eq $exprKey "max" -}}
	for _, x := range m.{{$field.Name}} {
		if checkIntGreater({{if $field.NeedCast -}}{{$field.Type}}({{end -}}x{{if $field.NeedCast -}}){{end -}}, {{$exprVal}}) {
			errs = append(errs, newValidationError("{{$field.Name}}", "at least one value greater then {{$exprVal}}"))
			break
		}	
	}
	{{end -}}
	{{if eq $exprKey "in" -}}
	for _, x := range m.{{$field.Name}} {
		if !checkIntIn({{if $field.NeedCast -}}{{$field.Type}}({{end -}}x{{if $field.NeedCast -}}){{end -}}, "{{$exprVal}}") {
			errs = append(errs, newValidationError("{{$field.Name}}", "at least one value not at list of allowed values [{{$exprVal}}]"))
			break
		}	
	}
	{{end -}}
	{{end -}}
	{{if eq $exprKey "min" -}}
	if checkIntLower({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, {{$exprVal}}) {
		errs = append(errs, newValidationError("{{$field.Name}}", "value is lower then {{$exprVal}}"))
	}
	{{end -}}
	{{if eq $exprKey "max" -}}
	if checkIntGreater({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, {{$exprVal}}) {
		errs = append(errs, newValidationError("{{$field.Name}}", "value is greater then {{$exprVal}}"))
	}
	{{end -}}
	{{if eq $exprKey "in" -}}
	if !checkIntIn({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, "{{$exprVal}}") {
		errs = append(errs, newValidationError("{{$field.Name}}", "value not at list of allowed values [{{$exprVal}}]"))
	}
	{{end -}}
	{{end -}}
	{{if eq $field.Type "string" -}}
	{{if $field.IsArray -}}
	{{if eq $exprKey "len" -}}
	for _, x := range m.{{$field.Name}} {
		if checkStringLen({{if $field.NeedCast -}}{{$field.Type}}({{end -}}x{{if $field.NeedCast -}}){{end -}}, {{$exprVal}}) {
			errs = append(errs, newValidationError("{{$field.Name}}", "at least one value length not equals {{$exprVal}}"))
			break
		}	
	}
	{{end -}}
	{{if eq $exprKey "in" -}}
	for _, x := range m.{{$field.Name}} {
		if !checkStringIn({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, "{{$exprVal}}") {
			errs = append(errs, newValidationError("{{$field.Name}}", "at least one value not at list of allowed values: [{{$exprVal}}]"))
			break
		}	
	}
	{{end -}}
	{{if eq $exprKey "regexp" -}}
	for _, x := range m.{{$field.Name}} {
		if !checkStringRegexp({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, "{{$exprVal}}") {
			errs = append(errs, newValidationError("{{$field.Name}}", "at least one value does not match regexp"))
			break
		}	
	}
	{{end -}}
	{{else -}}
	{{if eq $exprKey "len" -}}
	if !checkStringLen({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, {{$exprVal}}) {
		errs = append(errs, newValidationError("{{$field.Name}}", "value length not equals {{$exprVal}}"))
	}
	{{end -}}
	{{if eq $exprKey "in" -}}
	if !checkStringIn({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, "{{$exprVal}}") {
		errs = append(errs, newValidationError("{{$field.Name}}", "value not at list of allowed values [{{$exprVal}}]"))
	}
	{{end -}}
	{{if eq $exprKey "regexp" -}}
	if !checkStringRegexp({{if $field.NeedCast -}}{{$field.Type}}({{end -}}m.{{$field.Name}}{{if $field.NeedCast -}}){{end -}}, "{{$exprVal}}") {
		errs = append(errs, newValidationError("{{$field.Name}}", "value does not match regexp"))
	}
	{{end -}}
	{{end -}}
	{{end -}}
	{{end -}}
	{{end -}}
	return errs, nil
}
{{end -}}
`
