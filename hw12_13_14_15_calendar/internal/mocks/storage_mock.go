// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	storage "github.com/FreakyGranny/otus/hw12_13_14_15_calendar/internal/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetEvent mocks base method
func (m *MockStorage) GetEvent(ctx context.Context, id int64) (*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, id)
	ret0, _ := ret[0].(*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockStorageMockRecorder) GetEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockStorage)(nil).GetEvent), ctx, id)
}

// GetEventList mocks base method
func (m *MockStorage) GetEventList(ctx context.Context, date time.Time, period time.Duration) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventList", ctx, date, period)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventList indicates an expected call of GetEventList
func (mr *MockStorageMockRecorder) GetEventList(ctx, date, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventList", reflect.TypeOf((*MockStorage)(nil).GetEventList), ctx, date, period)
}

// CreateEvent mocks base method
func (m *MockStorage) CreateEvent(ctx context.Context, e *storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockStorageMockRecorder) CreateEvent(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStorage)(nil).CreateEvent), ctx, e)
}

// UpdateEvent mocks base method
func (m *MockStorage) UpdateEvent(ctx context.Context, e *storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent
func (mr *MockStorageMockRecorder) UpdateEvent(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStorage)(nil).UpdateEvent), ctx, e)
}

// DeleteEvent mocks base method
func (m *MockStorage) DeleteEvent(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockStorageMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockStorage)(nil).DeleteEvent), ctx, id)
}

// Close mocks base method
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// DeleteOldEvents mocks base method
func (m *MockStorage) DeleteOldEvents(ctx context.Context, d int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldEvents", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldEvents indicates an expected call of DeleteOldEvents
func (mr *MockStorageMockRecorder) DeleteOldEvents(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldEvents", reflect.TypeOf((*MockStorage)(nil).DeleteOldEvents), ctx, d)
}

// GetEventForNotification mocks base method
func (m *MockStorage) GetEventForNotification(ctx context.Context, i time.Duration) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventForNotification", ctx, i)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventForNotification indicates an expected call of GetEventForNotification
func (mr *MockStorageMockRecorder) GetEventForNotification(ctx, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventForNotification", reflect.TypeOf((*MockStorage)(nil).GetEventForNotification), ctx, i)
}
