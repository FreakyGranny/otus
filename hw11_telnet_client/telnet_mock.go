// Code generated by MockGen. DO NOT EDIT.
// Source: telnet.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTelnetClient is a mock of TelnetClient interface
type MockTelnetClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelnetClientMockRecorder
}

// MockTelnetClientMockRecorder is the mock recorder for MockTelnetClient
type MockTelnetClientMockRecorder struct {
	mock *MockTelnetClient
}

// NewMockTelnetClient creates a new mock instance
func NewMockTelnetClient(ctrl *gomock.Controller) *MockTelnetClient {
	mock := &MockTelnetClient{ctrl: ctrl}
	mock.recorder = &MockTelnetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTelnetClient) EXPECT() *MockTelnetClientMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockTelnetClient) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockTelnetClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockTelnetClient)(nil).Connect))
}

// Send mocks base method
func (m *MockTelnetClient) Send() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send")
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockTelnetClientMockRecorder) Send() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelnetClient)(nil).Send))
}

// Receive mocks base method
func (m *MockTelnetClient) Receive() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive
func (mr *MockTelnetClientMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockTelnetClient)(nil).Receive))
}

// Close mocks base method
func (m *MockTelnetClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockTelnetClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTelnetClient)(nil).Close))
}
